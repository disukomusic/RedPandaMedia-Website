// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nazLgTEW7V6FTXLkGvtboX
// Component: riKg8GIR57uE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: mY87X3S2UUL/component
import { TimelineWrapper } from "@plasmicpkgs/react-twitter-widgets"; // plasmic-import: x2j0abJR_t/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent

import { useScreenVariants as useScreenVariantszpgDFsEUbio } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: __zpgDFsEUbio/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_red_panda_media_website.module.css"; // plasmic-import: nazLgTEW7V6FTXLkGvtboX/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: riKg8GIR57uE/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: -8WdXkfhmn7/icon
import Icon38Icon from "./icons/PlasmicIcon__Icon38"; // plasmic-import: gCQki7ZDykM/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: 20vkZ39fVK/icon
import BrandInstagramsvgIcon from "./icons/PlasmicIcon__BrandInstagramsvg"; // plasmic-import: FPnuh-tu2Q/icon
import BrandFacebooksvgIcon from "./icons/PlasmicIcon__BrandFacebooksvg"; // plasmic-import: 1x1GOS4HV3/icon

export type PlasmicHomepage__VariantMembers = {};
export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<"div">;
  button?: p.Flex<"button">;
  button2?: p.Flex<typeof Button2>;
  timeline?: p.Flex<typeof TimelineWrapper>;
  microcosm?: p.Flex<"div">;
  eggRanger?: p.Flex<"div">;
};

export interface DefaultHomepageProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszpgDFsEUbio()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepage.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepage.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepage.pageMetadata.ogImageSrc}
        />
        <link ref="canonical" href={PlasmicHomepage.pageMetadata.canonical} />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"navBar"}
          data-plasmic-override={overrides.navBar}
          hasGap={true}
          className={classNames(projectcss.all, sty.navBar)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dKlN)}
          >
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__zJktI)}
              displayHeight={"auto" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"343px" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"100%" as const}
              src={{
                src: "/plasmic/red_panda_media_website/images/rpsLogopng.png",
                fullWidth: 1266,
                fullHeight: 269,
                aspectRatio: undefined
              }}
            />

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__kUbO)}
            >
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__kOAg
                )}
                component={Link}
                href={`/`}
                platform={"nextjs"}
                title={"Home" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mXqvS
                  )}
                >
                  {"Home"}
                </div>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__uf56Z
                )}
                component={Link}
                href={`/about`}
                platform={"nextjs"}
                title={"About Us" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__xApdF
                  )}
                >
                  {"About Us"}
                </div>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__nggnc
                )}
                component={Link}
                href={`/comics`}
                platform={"nextjs"}
                target={undefined}
                title={"Comics" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__zi7Rj
                  )}
                >
                  {"Comics"}
                </div>
              </p.PlasmicLink>

              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link___3FS0
                )}
                component={Link}
                href={`/newsletter`}
                platform={"nextjs"}
                title={"Newsletter" as const}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qk5XV
                  )}
                >
                  {"Newsletter"}
                </div>
              </p.PlasmicLink>
            </p.Stack>

            {false ? (
              <div className={classNames(projectcss.all, sty.freeBox__dnAi4)}>
                <button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames(
                    projectcss.all,
                    projectcss.button,
                    projectcss.__wab_text,
                    sty.button
                  )}
                >
                  {"Sign up"}
                </button>

                {true ? (
                  <Button2
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2)}
                    color={"clear" as const}
                    endIcon={
                      <Icon38Icon
                        className={classNames(projectcss.all, sty.svg__uhDLl)}
                        role={"img"}
                      />
                    }
                    startIcon={
                      <ChecksvgIcon
                        className={classNames(projectcss.all, sty.svg__lmJ9W)}
                        role={"img"}
                      />
                    }
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___975Ro
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button2>
                ) : null}
              </div>
            ) : null}
          </p.Stack>
        </p.Stack>

        <div className={classNames(projectcss.all, sty.columns__ic8T)}>
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <div className={classNames(projectcss.all, sty.column__s61Wh)}>
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___80AHz)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xkr20
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#F47D31" }}
                      >
                        {"Recent Activity"}
                      </span>
                    </React.Fragment>
                  </div>

                  <TimelineWrapper
                    data-plasmic-name={"timeline"}
                    data-plasmic-override={overrides.timeline}
                    className={classNames("__wab_instance", sty.timeline)}
                    theme={"dark" as const}
                    tweetLimit={1 as const}
                    url={"https://twitter.com/redpandamedia_" as const}
                  />
                </div>
              ) : null}
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.column__pcMc6)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___37G9D
              )}
            >
              <React.Fragment>
                <span
                  className={"plasmic_default__all plasmic_default__span"}
                  style={{ color: "#F47D31" }}
                >
                  {"Welcome!"}
                </span>
              </React.Fragment>
            </div>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oI6G
              )}
            >
              {
                "We’re Red Panda Studios, an indie media group focusing on games, music, and more.  On this site you can check out our games and other digital content, as well as information about the members of our crew and blog posts."
              }
            </div>

            <Reveal
              className={classNames("__wab_instance", sty.reveal__gfZv)}
              direction={"up" as const}
              effect={"bounce" as const}
              triggerOnce={true}
            >
              <div className={classNames(projectcss.all, sty.freeBox___2TLeu)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tRrBj
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F47D31" }}
                    >
                      {"Current Projects"}
                    </span>
                  </React.Fragment>
                </div>

                <div className={classNames(projectcss.all, sty.columns__f6WLu)}>
                  <div
                    data-plasmic-name={"microcosm"}
                    data-plasmic-override={overrides.microcosm}
                    className={classNames(projectcss.all, sty.microcosm)}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt__rl9Eo)}
                      glareEnable={false}
                      tiltMaxAngleX={20 as const}
                      tiltMaxAngleY={20 as const}
                      tiltReverse={true}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__vzKUg
                        )}
                        component={Link}
                        href={
                          "https://red-panda-studios.itch.io/microcosm" as const
                        }
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__nlcyl)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/red_panda_media_website/images/image2.png",
                            fullWidth: 461,
                            fullHeight: 76,
                            aspectRatio: undefined
                          }}
                        />
                      </p.PlasmicLink>
                    </Tilt>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0GclI
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#F47D31" }}
                        >
                          {"Made during SHOWTIME Event"}
                        </span>
                      </React.Fragment>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__s6Icj
                      )}
                    >
                      {
                        "microcosm is a Lovecraft-inspired pet simulation game. Feed, nurture, and make sacrifices to your own being of horror (and also cuteness)!"
                      }
                    </div>
                  </div>

                  <div
                    data-plasmic-name={"eggRanger"}
                    data-plasmic-override={overrides.eggRanger}
                    className={classNames(projectcss.all, sty.eggRanger)}
                  >
                    <Tilt
                      className={classNames("__wab_instance", sty.tilt__dJgQx)}
                      tiltMaxAngleX={20 as const}
                      tiltMaxAngleY={20 as const}
                      tiltReverse={true}
                    >
                      <p.PlasmicLink
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__qgoOa
                        )}
                        component={Link}
                        href={
                          "https://www.newgrounds.com/portal/view/807191?updated=1627282135" as const
                        }
                        platform={"nextjs"}
                        target={"_blank" as const}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___2BJn)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/red_panda_media_website/images/image3.png",
                            fullWidth: 441,
                            fullHeight: 114,
                            aspectRatio: undefined
                          }}
                        />
                      </p.PlasmicLink>
                    </Tilt>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__jixCa
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ color: "#F47D31" }}
                        >
                          {"Made for Newgrounds Egg Jam"}
                        </span>
                      </React.Fragment>
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__p4Tor
                      )}
                    >
                      {
                        "Egg Ranger is a top down bullet hell game. Zip through other worlds in a futuristic aircraft in search of exotic eggs! Prove your worth by shooting and weaving through waves of enemies. This omlette better be damn worth it."
                      }
                    </div>
                  </div>
                </div>
              </div>
            </Reveal>
          </div>

          <div className={classNames(projectcss.all, sty.column___7KFxr)}>
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <Reveal
                cascade={true}
                className={classNames("__wab_instance", sty.reveal___5U8X1)}
                direction={"right" as const}
                effect={"bounce" as const}
                triggerOnce={true}
              >
                <div className={classNames(projectcss.all, sty.freeBox__e4Mmr)}>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__xEmfa
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#F47D31" }}
                      >
                        {"Social Links"}
                      </span>
                    </React.Fragment>
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___4Fhva
                    )}
                    component={Link}
                    href={"https://twitter.com/RedPandaStudios" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xTMln)}
                    >
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg___6GMw3)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rIhZz
                        )}
                      >
                        {"Twitter"}
                      </div>
                    </div>
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__zB4Mc
                    )}
                    component={Link}
                    href={
                      "https://www.instagram.com/redpandastudios_/" as const
                    }
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__luykD)}
                    >
                      <BrandInstagramsvgIcon
                        className={classNames(projectcss.all, sty.svg___1Va8Y)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__n17Yf
                        )}
                      >
                        {"Instagram"}
                      </div>
                    </div>
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__jKmhG
                    )}
                    component={Link}
                    href={"https://www.facebook.com/redpandastudio2/" as const}
                    platform={"nextjs"}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__sCJ)}
                    >
                      <BrandFacebooksvgIcon
                        className={classNames(projectcss.all, sty.svg__gz0We)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__l99Ma
                        )}
                      >
                        {"Facebook"}
                      </div>
                    </div>
                  </p.PlasmicLink>
                </div>
              </Reveal>
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "button",
    "button2",
    "timeline",
    "microcosm",
    "eggRanger"
  ],
  navBar: ["navBar", "button", "button2"],
  button: ["button"],
  button2: ["button2"],
  timeline: ["timeline"],
  microcosm: ["microcosm"],
  eggRanger: ["eggRanger"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: "div";
  button: "button";
  button2: typeof Button2;
  timeline: typeof TimelineWrapper;
  microcosm: "div";
  eggRanger: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepage__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    timeline: makeNodeComponent("timeline"),
    microcosm: makeNodeComponent("microcosm"),
    eggRanger: makeNodeComponent("eggRanger"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home 🐾",
      description:
        "~Red Panda Media~\nGames, Music, Comics\nDigital Artist Collective",
      ogImageSrc:
        "https://site-assets.plasmic.app/d58a47bfe90ae5acd650ca29bcce987f.png",
      canonical: "https://redpandamedia.net"
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
