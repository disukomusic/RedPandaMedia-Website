// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nazLgTEW7V6FTXLkGvtboX
// Component: CIy-AvfP5yL

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: mY87X3S2UUL/component

import { useScreenVariants as useScreenVariantszpgDFsEUbio } from "../red_panda_media_website/PlasmicGlobalVariant__Screen"; // plasmic-import: __zpgDFsEUbio/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../red_panda_media_website/plasmic_red_panda_media_website.module.css"; // plasmic-import: nazLgTEW7V6FTXLkGvtboX/projectcss
import sty from "./PlasmicNavBar2.module.css"; // plasmic-import: CIy-AvfP5yL/css

import ChecksvgIcon from "../red_panda_media_website/icons/PlasmicIcon__Checksvg"; // plasmic-import: -8WdXkfhmn7/icon
import Icon38Icon from "../red_panda_media_website/icons/PlasmicIcon__Icon38"; // plasmic-import: gCQki7ZDykM/icon

export type PlasmicNavBar2__VariantMembers = {};
export type PlasmicNavBar2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNavBar2__VariantsArgs;
export const PlasmicNavBar2__VariantProps = new Array<VariantPropType>();

export type PlasmicNavBar2__ArgsType = {};
type ArgPropType = keyof PlasmicNavBar2__ArgsType;
export const PlasmicNavBar2__ArgProps = new Array<ArgPropType>();

export type PlasmicNavBar2__OverridesType = {
  navBar?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  button?: p.Flex<"button">;
  button2?: p.Flex<typeof Button2>;
};

export interface DefaultNavBar2Props {
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavBar2__RenderFunc(props: {
  variants: PlasmicNavBar2__VariantsArgs;
  args: PlasmicNavBar2__ArgsType;
  overrides: PlasmicNavBar2__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszpgDFsEUbio()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"navBar"}
      data-plasmic-override={overrides.navBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.navBar
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__fze5W)}
      >
        <p.PlasmicImg
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto" as const}
          displayMaxHeight={"none" as const}
          displayMaxWidth={"343px" as const}
          displayMinHeight={"0" as const}
          displayMinWidth={"0" as const}
          displayWidth={"100%" as const}
          src={{
            src: "/plasmic/red_panda_media_website/images/rpsLogopng.png",
            fullWidth: 1266,
            fullHeight: 269,
            aspectRatio: undefined
          }}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___2Iwi7)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__ingV6
              )}
              component={Link}
              href={`/`}
              platform={"nextjs"}
              title={"Home" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__adC7E
                )}
              >
                {"Home"}
              </div>
            </p.PlasmicLink>
          ) : null}
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__lsoP7
            )}
            component={Link}
            href={`/about`}
            platform={"nextjs"}
            title={"About Us" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__ih8Mn
              )}
            >
              {"About Us"}
            </div>
          </p.PlasmicLink>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__eBeM7
            )}
            component={Link}
            href={`/comics`}
            platform={"nextjs"}
            target={undefined}
            title={"Comics" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uqd3O
              )}
            >
              {"Comics"}
            </div>
          </p.PlasmicLink>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__kfZyv
            )}
            component={Link}
            href={`/newsletter`}
            platform={"nextjs"}
            title={"Newsletter" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__c410J
              )}
            >
              {"Newsletter"}
            </div>
          </p.PlasmicLink>
          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link___8A4K
            )}
            component={Link}
            href={`/radio`}
            platform={"nextjs"}
            title={"Newsletter" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gsR2Z
              )}
            >
              {"Radio"}
            </div>
          </p.PlasmicLink>
        </p.Stack>
        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox__xaxU)}>
            <button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button
              )}
            >
              {"Sign up"}
            </button>
            {true ? (
              <Button2
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
                color={"clear" as const}
                endIcon={
                  <Icon38Icon
                    className={classNames(projectcss.all, sty.svg__xAbbI)}
                    role={"img"}
                  />
                }
                startIcon={
                  <ChecksvgIcon
                    className={classNames(projectcss.all, sty.svg__tbCds)}
                    role={"img"}
                  />
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rkpgk
                  )}
                >
                  {"Log in"}
                </div>
              </Button2>
            ) : null}
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  navBar: ["navBar", "img", "button", "button2"],
  img: ["img"],
  button: ["button"],
  button2: ["button2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  navBar: "div";
  img: typeof p.PlasmicImg;
  button: "button";
  button2: typeof Button2;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavBar2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavBar2__VariantsArgs;
    args?: PlasmicNavBar2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavBar2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicNavBar2__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavBar2__ArgProps,
          internalVariantPropNames: PlasmicNavBar2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavBar2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "navBar") {
    func.displayName = "PlasmicNavBar2";
  } else {
    func.displayName = `PlasmicNavBar2.${nodeName}`;
  }
  return func;
}

export const PlasmicNavBar2 = Object.assign(
  // Top-level PlasmicNavBar2 renders the root element
  makeNodeComponent("navBar"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),

    // Metadata about props expected for PlasmicNavBar2
    internalVariantProps: PlasmicNavBar2__VariantProps,
    internalArgProps: PlasmicNavBar2__ArgProps
  }
);

export default PlasmicNavBar2;
/* prettier-ignore-end */
