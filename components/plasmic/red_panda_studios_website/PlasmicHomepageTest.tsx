// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: nazLgTEW7V6FTXLkGvtboX
// Component: LXhJm1UX0gu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button2 from "../../Button2"; // plasmic-import: mY87X3S2UUL/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import { Embed } from "@plasmicpkgs/plasmic-basic-components"; // plasmic-import: PKldDYkH42/codeComponent
import { TimelineWrapper } from "@plasmicpkgs/react-twitter-widgets"; // plasmic-import: x2j0abJR_t/codeComponent
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent

import { useScreenVariants as useScreenVariantszpgDFsEUbio } from "../red_panda_media_website/PlasmicGlobalVariant__Screen"; // plasmic-import: __zpgDFsEUbio/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../red_panda_media_website/plasmic_red_panda_media_website.module.css"; // plasmic-import: nazLgTEW7V6FTXLkGvtboX/projectcss
import sty from "./PlasmicHomepageTest.module.css"; // plasmic-import: LXhJm1UX0gu/css

import ChecksvgIcon from "../red_panda_media_website/icons/PlasmicIcon__Checksvg"; // plasmic-import: -8WdXkfhmn7/icon
import Icon38Icon from "../red_panda_media_website/icons/PlasmicIcon__Icon38"; // plasmic-import: gCQki7ZDykM/icon
import IconIcon from "../red_panda_media_website/icons/PlasmicIcon__Icon"; // plasmic-import: 20vkZ39fVK/icon
import BrandInstagramsvgIcon from "../red_panda_media_website/icons/PlasmicIcon__BrandInstagramsvg"; // plasmic-import: FPnuh-tu2Q/icon
import BrandFacebooksvgIcon from "../red_panda_media_website/icons/PlasmicIcon__BrandFacebooksvg"; // plasmic-import: 1x1GOS4HV3/icon

export type PlasmicHomepageTest__VariantMembers = {};
export type PlasmicHomepageTest__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepageTest__VariantsArgs;
export const PlasmicHomepageTest__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepageTest__ArgsType = {};
type ArgPropType = keyof PlasmicHomepageTest__ArgsType;
export const PlasmicHomepageTest__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepageTest__OverridesType = {
  root?: p.Flex<"div">;
  navBar?: p.Flex<"div">;
  button?: p.Flex<"button">;
  button2?: p.Flex<typeof Button2>;
  slider?: p.Flex<typeof Slider>;
  newsletter?: p.Flex<"div">;
  embedHtml?: p.Flex<typeof Embed>;
  timeline?: p.Flex<typeof TimelineWrapper>;
  welcomeProjects?: p.Flex<"div">;
  microcosm?: p.Flex<"div">;
  eggRanger?: p.Flex<"div">;
  welcomeProjects2?: p.Flex<"div">;
  microcosm2?: p.Flex<"div">;
  eggRanger2?: p.Flex<"div">;
};

export interface DefaultHomepageTestProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepageTest__RenderFunc(props: {
  variants: PlasmicHomepageTest__VariantsArgs;
  args: PlasmicHomepageTest__ArgsType;
  overrides: PlasmicHomepageTest__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantszpgDFsEUbio()
  });

  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary_large_image" />
        <title key="title">{PlasmicHomepageTest.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomepageTest.pageMetadata.title}
        />
        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomepageTest.pageMetadata.title}
        />
        <meta
          key="description"
          name="description"
          content={PlasmicHomepageTest.pageMetadata.description}
        />
        <meta
          key="og:description"
          property="og:description"
          content={PlasmicHomepageTest.pageMetadata.description}
        />
        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicHomepageTest.pageMetadata.description}
        />
        <meta
          key="og:image"
          property="og:image"
          content={PlasmicHomepageTest.pageMetadata.ogImageSrc}
        />
        <meta
          key="twitter:image"
          name="twitter:image"
          content={PlasmicHomepageTest.pageMetadata.ogImageSrc}
        />
        <link
          ref="canonical"
          href={PlasmicHomepageTest.pageMetadata.canonical}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"navBar"}
            data-plasmic-override={overrides.navBar}
            hasGap={true}
            className={classNames(projectcss.all, sty.navBar)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__p0D8T)}
            >
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__lEtYy)}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"343px" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"100%" as const}
                src={{
                  src: "/plasmic/red_panda_media_website/images/rpsLogopng.png",
                  fullWidth: 1266,
                  fullHeight: 269,
                  aspectRatio: undefined
                }}
              />

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__rtpNy)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__xHlwE
                  )}
                  component={Link}
                  href={`/`}
                  platform={"nextjs"}
                  title={"Home" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__gLaDv
                    )}
                  >
                    {"Home"}
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__fAxg5
                  )}
                  component={Link}
                  href={`/about`}
                  platform={"nextjs"}
                  title={"About Us" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__b9Auv
                    )}
                  >
                    {"About Us"}
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link___90FdH
                  )}
                  component={Link}
                  href={`/comics`}
                  platform={"nextjs"}
                  target={undefined}
                  title={"Comics" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__syIu
                    )}
                  >
                    {"Comics"}
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__quIap
                  )}
                  component={Link}
                  href={`/newsletter`}
                  platform={"nextjs"}
                  title={"Newsletter" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ezOz7
                    )}
                  >
                    {"Newsletter"}
                  </div>
                </p.PlasmicLink>
              </p.Stack>

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__pgV0Z)}>
                  <button
                    data-plasmic-name={"button"}
                    data-plasmic-override={overrides.button}
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button
                    )}
                  >
                    {"Sign up"}
                  </button>

                  {true ? (
                    <Button2
                      data-plasmic-name={"button2"}
                      data-plasmic-override={overrides.button2}
                      className={classNames("__wab_instance", sty.button2)}
                      color={"clear" as const}
                      endIcon={
                        <Icon38Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___15Op7
                          )}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <ChecksvgIcon
                          className={classNames(projectcss.all, sty.svg___1QFs)}
                          role={"img"}
                        />
                      }
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___1VTKn
                        )}
                      >
                        {"Log in"}
                      </div>
                    </Button2>
                  ) : null}
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>
        ) : null}
        {true ? (
          <div className={classNames(projectcss.all, sty.freeBox__tusbx)}>
            <Slider
              data-plasmic-name={"slider"}
              data-plasmic-override={overrides.slider}
              autoplay={true}
              centerMode={false}
              className={classNames("__wab_instance", sty.slider)}
              dots={true}
              easing={"" as const}
              slidesPerRow={1 as const}
              slidesToScroll={1 as const}
              slidesToShow={3 as const}
              vertical={false}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <div
                  data-plasmic-name={"newsletter"}
                  data-plasmic-override={overrides.newsletter}
                  className={classNames(projectcss.all, sty.newsletter)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___62ZT
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#F47D31" }}
                      >
                        {"Latest Newsletter"}
                      </span>
                    </React.Fragment>
                  </div>

                  <Embed
                    data-plasmic-name={"embedHtml"}
                    data-plasmic-override={overrides.embedHtml}
                    className={classNames("__wab_instance", sty.embedHtml)}
                    code={
                      '<iframe src="https://mailchi.mp/73959a8b0951/red-panda-studios-newsletter-febuary" style="border:0px #ffffff none;" name="Newsletter" scrolling="yes" frameborder="1" marginheight="0px" marginwidth="0px" height="500px" width="419px" allowfullscreen></iframe>' as const
                    }
                  />

                  {true ? (
                    <TimelineWrapper
                      data-plasmic-name={"timeline"}
                      data-plasmic-override={overrides.timeline}
                      className={classNames("__wab_instance", sty.timeline)}
                      theme={"dark" as const}
                      tweetLimit={1 as const}
                      url={"https://twitter.com/redpandamedia_" as const}
                    />
                  ) : null}
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"welcomeProjects"}
                  data-plasmic-override={overrides.welcomeProjects}
                  className={classNames(projectcss.all, sty.welcomeProjects)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__rne3U
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "#F47D31" }}
                      >
                        {"Welcome!"}
                      </span>
                    </React.Fragment>
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__okkMk
                    )}
                  >
                    {
                      "We’re Red Panda Studios, an indie media group focusing on games, music, and more.  On this site you can check out our games and other digital content, as well as information about the members of our crew and blog posts."
                    }
                  </div>

                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__m0V8)}
                    direction={"up" as const}
                    effect={"bounce" as const}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__fL8XY)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yoGWy
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#F47D31" }}
                          >
                            {"Current Projects"}
                          </span>
                        </React.Fragment>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__ae3Tx
                        )}
                      >
                        <div
                          data-plasmic-name={"microcosm"}
                          data-plasmic-override={overrides.microcosm}
                          className={classNames(projectcss.all, sty.microcosm)}
                        >
                          <Tilt
                            className={classNames(
                              "__wab_instance",
                              sty.tilt__gq62M
                            )}
                            glareEnable={false}
                            tiltMaxAngleX={20 as const}
                            tiltMaxAngleY={20 as const}
                            tiltReverse={true}
                          >
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link___7FqCf
                              )}
                              component={Link}
                              href={
                                "https://red-panda-studios.itch.io/microcosm" as const
                              }
                              platform={"nextjs"}
                              target={"_blank" as const}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__yUdW9)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/red_panda_media_website/images/image2.png",
                                  fullWidth: 461,
                                  fullHeight: 76,
                                  aspectRatio: undefined
                                }}
                              />
                            </p.PlasmicLink>
                          </Tilt>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__jwl4S
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#F47D31" }}
                              >
                                {"Made during SHOWTIME Event"}
                              </span>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__xLSI
                            )}
                          >
                            {
                              "microcosm is a Lovecraft-inspired pet simulation game. Feed, nurture, and make sacrifices to your own being of horror (and also cuteness)!"
                            }
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"eggRanger"}
                          data-plasmic-override={overrides.eggRanger}
                          className={classNames(projectcss.all, sty.eggRanger)}
                        >
                          <Tilt
                            className={classNames(
                              "__wab_instance",
                              sty.tilt__ju8Cl
                            )}
                            tiltMaxAngleX={20 as const}
                            tiltMaxAngleY={20 as const}
                            tiltReverse={true}
                          >
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__qfapg
                              )}
                              component={Link}
                              href={
                                "https://www.newgrounds.com/portal/view/807191?updated=1627282135" as const
                              }
                              platform={"nextjs"}
                              target={"_blank" as const}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___7RpGg)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/red_panda_media_website/images/image3.png",
                                  fullWidth: 441,
                                  fullHeight: 114,
                                  aspectRatio: undefined
                                }}
                              />
                            </p.PlasmicLink>
                          </Tilt>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__r1ZgI
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#F47D31" }}
                              >
                                {"Made for Newgrounds Egg Jam"}
                              </span>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nzTp4
                            )}
                          >
                            {
                              "Egg Ranger is a top down bullet hell game. Zip through other worlds in a futuristic aircraft in search of exotic eggs! Prove your worth by shooting and weaving through waves of enemies. This omlette better be damn worth it."
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  </Reveal>
                </div>
              ) : null}
              {true ? (
                <div
                  data-plasmic-name={"welcomeProjects2"}
                  data-plasmic-override={overrides.welcomeProjects2}
                  className={classNames(projectcss.all, sty.welcomeProjects2)}
                >
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__vIC2)}
                    direction={"up" as const}
                    effect={"bounce" as const}
                    triggerOnce={true}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__lv7Zq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yvH
                        )}
                      >
                        <React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ color: "#F47D31" }}
                          >
                            {"New Projects"}
                          </span>
                        </React.Fragment>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.columns__tYSjS
                        )}
                      >
                        <div
                          data-plasmic-name={"microcosm2"}
                          data-plasmic-override={overrides.microcosm2}
                          className={classNames(projectcss.all, sty.microcosm2)}
                        >
                          <Tilt
                            className={classNames(
                              "__wab_instance",
                              sty.tilt__vbLgw
                            )}
                            glareEnable={false}
                            tiltMaxAngleX={20 as const}
                            tiltMaxAngleY={20 as const}
                            tiltReverse={true}
                          >
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link___9G6Hd
                              )}
                              component={Link}
                              href={
                                "https://red-panda-studios.itch.io/microcosm" as const
                              }
                              platform={"nextjs"}
                              target={"_blank" as const}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___3YOAj)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/red_panda_studios_website/images/ddsLogopng.png",
                                  fullWidth: 2075,
                                  fullHeight: 963,
                                  aspectRatio: undefined
                                }}
                              />
                            </p.PlasmicLink>
                          </Tilt>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__wH2Jv
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#F47D31" }}
                              >
                                {"Disuko Dating Simulator"}
                              </span>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___77BOh
                            )}
                          >
                            {
                              "microcosm is a Lovecraft-inspired pet simulation game. Feed, nurture, and make sacrifices to your own being of horror (and also cuteness)!"
                            }
                          </div>
                        </div>

                        <div
                          data-plasmic-name={"eggRanger2"}
                          data-plasmic-override={overrides.eggRanger2}
                          className={classNames(projectcss.all, sty.eggRanger2)}
                        >
                          <Tilt
                            className={classNames(
                              "__wab_instance",
                              sty.tilt__thx4F
                            )}
                            tiltMaxAngleX={20 as const}
                            tiltMaxAngleY={20 as const}
                            tiltReverse={true}
                          >
                            <p.PlasmicLink
                              className={classNames(
                                projectcss.all,
                                projectcss.a,
                                sty.link__udTFn
                              )}
                              component={Link}
                              href={
                                "https://www.newgrounds.com/portal/view/807191?updated=1627282135" as const
                              }
                              platform={"nextjs"}
                              target={"_blank" as const}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__bu7Cd)}
                                displayHeight={"auto" as const}
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"100%" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"auto" as const}
                                loading={"lazy" as const}
                                src={{
                                  src: "/plasmic/red_panda_media_website/images/image3.png",
                                  fullWidth: 441,
                                  fullHeight: 114,
                                  aspectRatio: undefined
                                }}
                              />
                            </p.PlasmicLink>
                          </Tilt>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__nkghC
                            )}
                          >
                            <React.Fragment>
                              <span
                                className={
                                  "plasmic_default__all plasmic_default__span"
                                }
                                style={{ color: "#F47D31" }}
                              >
                                {"Groove Machines"}
                              </span>
                            </React.Fragment>
                          </div>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__zvuy2
                            )}
                          >
                            {
                              "Egg Ranger is a top down bullet hell game. Zip through other worlds in a futuristic aircraft in search of exotic eggs! Prove your worth by shooting and weaving through waves of enemies. This omlette better be damn worth it."
                            }
                          </div>
                        </div>
                      </div>
                    </div>
                  </Reveal>
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox___86Q7C)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__afJyQ
                  )}
                >
                  <React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F47D31" }}
                    >
                      {"Social Links"}
                    </span>
                  </React.Fragment>
                </div>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__zpTUy
                  )}
                  component={Link}
                  href={"https://twitter.com/RedPandaStudios" as const}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__avkrp)}
                  >
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__rgKul)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__v4W5Z
                      )}
                    >
                      {"Twitter"}
                    </div>
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__h7OpJ
                  )}
                  component={Link}
                  href={"https://www.instagram.com/redpandastudios_/" as const}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__cCbwV)}
                  >
                    <BrandInstagramsvgIcon
                      className={classNames(projectcss.all, sty.svg__d8M4D)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wzpzm
                      )}
                    >
                      {"Instagram"}
                    </div>
                  </div>
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.link__ixNhA
                  )}
                  component={Link}
                  href={"https://www.facebook.com/redpandastudio2/" as const}
                  platform={"nextjs"}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vh9Ld)}
                  >
                    <BrandFacebooksvgIcon
                      className={classNames(projectcss.all, sty.svg__nU5M)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__z7K4U
                      )}
                    >
                      {"Facebook"}
                    </div>
                  </div>
                </p.PlasmicLink>
              </div>
            </Slider>

            {true ? (
              <div className={classNames(projectcss.all, sty.freeBox__cEjU5)} />
            ) : null}
          </div>
        ) : null}
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navBar",
    "button",
    "button2",
    "slider",
    "newsletter",
    "embedHtml",
    "timeline",
    "welcomeProjects",
    "microcosm",
    "eggRanger",
    "welcomeProjects2",
    "microcosm2",
    "eggRanger2"
  ],
  navBar: ["navBar", "button", "button2"],
  button: ["button"],
  button2: ["button2"],
  slider: [
    "slider",
    "newsletter",
    "embedHtml",
    "timeline",
    "welcomeProjects",
    "microcosm",
    "eggRanger",
    "welcomeProjects2",
    "microcosm2",
    "eggRanger2"
  ],
  newsletter: ["newsletter", "embedHtml", "timeline"],
  embedHtml: ["embedHtml"],
  timeline: ["timeline"],
  welcomeProjects: ["welcomeProjects", "microcosm", "eggRanger"],
  microcosm: ["microcosm"],
  eggRanger: ["eggRanger"],
  welcomeProjects2: ["welcomeProjects2", "microcosm2", "eggRanger2"],
  microcosm2: ["microcosm2"],
  eggRanger2: ["eggRanger2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navBar: "div";
  button: "button";
  button2: typeof Button2;
  slider: typeof Slider;
  newsletter: "div";
  embedHtml: typeof Embed;
  timeline: typeof TimelineWrapper;
  welcomeProjects: "div";
  microcosm: "div";
  eggRanger: "div";
  welcomeProjects2: "div";
  microcosm2: "div";
  eggRanger2: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepageTest__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepageTest__VariantsArgs;
    args?: PlasmicHomepageTest__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepageTest__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicHomepageTest__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepageTest__ArgProps,
          internalVariantPropNames: PlasmicHomepageTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepageTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepageTest";
  } else {
    func.displayName = `PlasmicHomepageTest.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepageTest = Object.assign(
  // Top-level PlasmicHomepageTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navBar: makeNodeComponent("navBar"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    slider: makeNodeComponent("slider"),
    newsletter: makeNodeComponent("newsletter"),
    embedHtml: makeNodeComponent("embedHtml"),
    timeline: makeNodeComponent("timeline"),
    welcomeProjects: makeNodeComponent("welcomeProjects"),
    microcosm: makeNodeComponent("microcosm"),
    eggRanger: makeNodeComponent("eggRanger"),
    welcomeProjects2: makeNodeComponent("welcomeProjects2"),
    microcosm2: makeNodeComponent("microcosm2"),
    eggRanger2: makeNodeComponent("eggRanger2"),

    // Metadata about props expected for PlasmicHomepageTest
    internalVariantProps: PlasmicHomepageTest__VariantProps,
    internalArgProps: PlasmicHomepageTest__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "Home 🐾",
      description:
        "~Red Panda Studios~\nGames, Music, Comics\nDigital Artist Collective",
      ogImageSrc:
        "https://site-assets.plasmic.app/d58a47bfe90ae5acd650ca29bcce987f.png",
      canonical: "https://redpandamedia.net"
    }
  }
);

export default PlasmicHomepageTest;
/* prettier-ignore-end */
